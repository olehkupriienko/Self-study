/*   #1.3.1
     Выбор уникальных элементов столбца
Чтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT,
    которое размещается сразу после SELECT.*/
SELECT DISTINCT author
FROM book;
/* Другой способ – использование оператора GROUP BY, который группирует данные при выборке, имеющие одинаковые
   значения в некотором столбце. Столбец, по которому осуществляется группировка, указывается после GROUP BY .
С помощью GROUP BY можно выбрать уникальные элементы столбца, по которому осуществляется группировка.
   Результат будет точно такой же как при использовании DISTINCT. */
SELECT author
FROM book
GROUP BY author;

/*   #1.3.2
     При группировке над элементами столбца, входящими в группу можно выполнить различные действия, например,
     просуммировать их или найти количество элементов в группе.
     Рекомендуется всем  вычисляемым столбцам давать имя
     Функцию (COUNT() например) можно применять к любому столбцу, в том числе можно использовать и *
COUNT(*) —  подсчитывает  все записи, относящиеся к группе, в том числе и со значением NULL;
COUNT(имя_столбца) — возвращает количество записей конкретного столбца (только NOT NULL), относящихся к группе.
     Если столбец указан в SELECT  БЕЗ применения групповой функции, то он обязательно должен быть указан и в GROUP BY.*/
SELECT DISTINCT author AS Автор, COUNT(title) AS Различных_книг, SUM(amount) AS Количество_экземпляров
FROM book
GROUP BY author;

/*   #1.3.3
     Выборка данных, групповые функции MIN, MAX и AVG
К групповым функциям SQL относятся: MIN(), MAX() и AVG(), которые вычисляют минимальное, максимальное и среднее
     значение элементов столбца, относящихся к группе.*/
SELECT author,
       MIN(price) AS Минимальная_цена,
       MAX(price) AS Максимальная_цена,
       AVG(price) AS Средняя_цена
FROM book
GROUP BY author;

/*   #1.3.4
     Выборка данных c вычислением, групповые функции
В качестве аргумента групповых функций  SQL может использоваться не только столбец, но и любое допустимое в SQL
     арифметическое выражение. */
SELECT author,
       SUM(price * amount)                         AS Стоимость,
       ROUND(SUM(price * amount) * 0.18 / 1.18, 2) AS НДС,
       ROUND(SUM(price * amount) / 1.18, 2)        AS Стоимость_без_НДС
FROM book
GROUP BY author;

/*   #1.3.5
     Вычисления по таблице целиком
     Групповые функции позволяют вычислять итоговые значения по всей таблице. Для этого после ключевого слова SELECT
     указывается групповая функция для выражения или имени столбца, а ключевые слова GROUP BY опускаются */
SELECT MIN(price)           AS 'Минимальная цена',
       MAX(price)           AS 'Максимальная цена',
       ROUND(AVG(price), 2) AS 'Средняя цена'
FROM book;

/*   #1.3.6
     Выборка данных по условию, групповые функции
     В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается
после WHERE. В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING , которое размещается
после оператора GROUP BY.
Пример: Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000. */
SELECT author,
       MIN(price) AS Минимальная_цена,
       MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(price * amount) > 5000;
/*Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу
от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой. */
SELECT AVG(price)                    AS Средняя_цена,
       ROUND(SUM(price * amount), 2) AS Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14;

/*   #1.3.7
     Выборка данных по условию, групповые функции, WHERE и HAVING
     Необходимо учитывать порядок выполнения (НЕ  ЗАПИСИ) SQL запроса на выборку на СЕРВЕРЕ:
FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY  */
SELECT author,
       ROUND(SUM(price * amount), 2) AS Стоимость
FROM book
WHERE title NOT IN ('Идиот', 'Белая гвардия')
group by author
HAVING SUM(price * amount) > 5000
ORDER BY Стоимость DESC